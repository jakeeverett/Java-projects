package cs1302.calc;

/** 
 * Provides a basic implementation of the operations defined in the <code>MathOps</code>
 * interface. This implementation assumes that the inputs to each method are
 * non-negative integers.
 */
public class RecursiveMathOps implements MathOps{

  /**
     * Returns the result of the addition operation.
     *
     * @param lhs the first operand
     * @param rhs the second operand
     * @return the result of the operation
     */
     @Override
    public int add(int lhs, int rhs){
       if (rhs==0) return lhs;
       return add(succ(lhs), pred(rhs));
       /**
       if (rhs==0){
         return lhs;
       }
       else{
         lhs = succ(lhs);
         rhs = pred(rhs);
         return add(lhs, rhs);
       }
        */
    }
    

    /**
     * Returns the result of the subtraction operation.
     *
     * @param lhs the first operand
     * @param rhs the second operand
     * @return the result of the operation
     */
    public int sub(int lhs, int rhs){
      if (rhs==0){
        return lhs;
      }
      else{
        lhs = pred(lhs);
        rhs= pred(rhs);
        return sub(lhs, rhs);
      }
    }

    /**
     * Returns the result of the binary multiplication.
     *
     * @param lhs the first operand
     * @param rhs the second operand
     * @return the result of the operation
     */
    public int mul(int lhs, int rhs){
      if (rhs ==0) return 0;
      if (rhs ==1) return lhs;
      return add(lhs, mul(lhs, pred(rhs)));
      /**
      int output = lhs;
      if (rhs==0 || lhs==0){
        return 0;
      }
      else if (lhs==1){
        return rhs;
      }
      else if (rhs==1){
        return lhs;
      }
      else{
        output = add(lhs, lhs);
        rhs = pred(rhs);
        return mul(add(lhs, lhs), pred(rhs));

      }
       */
    }

    /**
     * Returns the result of the division operation.
     * <code>lhs / rhs</code>.
     *
     * @param lhs the first operand
     * @param rhs the second operand
     * @return the result of the operation
     * @throws ArithmeticException if the second operand is equal to zero.
     */
    public int div(int lhs, int rhs) throws ArithmeticException{//ask about this
      int test = rhs;
      if(rhs==0){
        System.out.println("ya fucked up");
        return 0;
      }
      else{
        if (rhs==1){
          return lhs;
        }
        else{

          return div(lhs, rhs);
        }
      }
    }

    /**
     * Returns the result of the factorial operation.
     *
     * @param num the operand
     * @return the result of the operation
     */
    public int fac(int num){
      if (num==0) return 1;
      return mul(num, fac(succ(num)));
    }

    /**
     * Returns the result of the exponentiation operation 
     * <code>lhs ^^ rhs</code>. 
     *
     * @param lhs the first operand
     * @param rhs the second operand
     * @return the result of the operation
     */
    public int pow(int lhs, int rhs){
      if (rhs==0){
        return 1;
      }
      else if (rhs==1){
        return lhs;
      }
      else{
        rhs = succ(rhs);
        return pow(mul(lhs, lhs), rhs);
      }
    }

    /**
     * Returns the result of the left-shift operation.
     *
     * @param lhs the first operand
     * @param rhs the second operand
     * @return the result of the operation
     */
    public int lshift(int lhs, int rhs){
    return lhs;
    }


    /**
     * Returns the result of the right-shift operation.
     *
     * @param lhs the first operand
     * @param rhs the second operand
     * @return the result of the operation
     */
    public int rshift(int lhs, int rhs){
    return lhs;
    }

} // RecursiveMathOps

